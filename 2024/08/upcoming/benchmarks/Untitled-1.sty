\documentclass[num-refs]{wiley-article}
\usepackage[utf8]{inputenc}
\usepackage{lipsum}
\usepackage{booktabs}
\PassOptionsToPackage{hyphens}{url}
\usepackage{hyperref}
\usepackage{xcolor}
\hypersetup{
    colorlinks,
    linkcolor={red!50!black},
    citecolor={blue!50!black},
    urlcolor={black}
}
\newcommand*{\restartrowcolors}{%
  \ifhmode\unskip\fi
  \vadjust{%
    \global\rownum=0 %
  }%
}
\usepackage{subcaption}
\renewcommand{\dbltopfraction}{0.95}
\renewcommand{\textfraction}{0.05}
\renewcommand{\floatpagefraction}{0.8}
\renewcommand{\dblfloatpagefraction}{0.8}
\usepackage{textcomp}
\usepackage{listings}
\lstset{columns=fullflexible,basicstyle=\ttfamily,upquote=true}
\lstdefinestyle{customcpp}{%
  belowcaptionskip=1\baselineskip,
  breaklines=true,
  xleftmargin=\parindent,
  language=C++,
  showstringspaces=false,
  basicstyle=\linespread{0.4}\small\ttfamily,
  keywordstyle=\bfseries\color{green!40!black},
  numberstyle=\tiny,
  commentstyle=\itshape\color{purple!40!black},
  identifierstyle=\bfseries\color{black},
  stringstyle=\color{red},
  emph={int,char,double,float,unsigned},
  emphstyle=\color{blue},
  morekeywords={uint64_t,uint32_t,__m256i,__m128i,UINT64_C},
}
\definecolor{light-gray}{gray}{0.95}
\usepackage{todonotes}
\usepackage{microtype}
\usepackage[per-mode=symbol]{siunitx}
\usepackage{pgfplots}
\usepackage{tikz}
\usepackage{tikzscale}
\usetikzlibrary{automata,positioning,arrows,quotes}
\definecolor{bblue}{HTML}{4F81BD}
\definecolor{rred}{HTML}{C0504D}
\definecolor{ggreen}{HTML}{9BBB59}
\definecolor{ppurple}{HTML}{9F4C7C}
\definecolor{ggreen}{HTML}{00FF00}

\papertype{Research Article}


\title{Batched Ranged Random Integer Generation}
\author[1]{Nevin Brackett-Rozinsky}
\author[1]{Daniel Lemire}

\affil[1]{Data Science Research Center, Universit\'e du Qu\'ebec (TELUQ), Montreal, Quebec, H2S 3L5, Canada}


\corraddress{Daniel Lemire, Data Science Research Center, Universit\'e du Qu\'ebec (TELUQ), Montreal, Quebec, H2S 3L5, Canada}
\corremail{daniel.lemire@teluq.ca}

\fundinginfo{Natural Sciences and Engineering Research Council of Canada, Grant Number: RGPIN-2024-03787}
\runningauthor{Nevin Brackett-Rozinsky and Daniel Lemire}
\begin{document}


\maketitle
\begin{abstract}
Pseudo-random values are often generated as 64-bit binary words. These random words need to be converted
into ranged values without statistical bias. We present an efficient algorithm to generate multiple independent
uniformly random bounded integers from single uniformly random binary words---without any bias. 
In the common case, our method uses one multiplication and no division operations per value produced.
This algorithm can improve the speed of unbiased random shuffling for small to moderatly large arrays.
\keywords{Random number generation, Rejection method, Randomized algorithms}
\end{abstract}

\section{Introduction}

We sometimes need to encode arbitrary binary data as text.
Base64 encodes binary data using 64~distinct characters: ASCII letters (upper and lower case) as well as the ten~digits, and two additional characters (`\texttt{+}` and `\texttt{/}`). For example, the string \texttt{Russia} viewed as a sequence of 6~ASCII bytes becomes 8~base64 characters \texttt{UnVzc2lh}. Base64 is ubiquitous. Email attachments are typically encoded in base64 in the MIME email protocol\cite{rfc2045}. Encryption keys are often exchanged as PEM files, using base64. Some HTTP headers are sent as base64 (e.g., basic access authentication). Images and WebAssembly code is often stored as base64 inside text-only resources like XML, JavaScript or HTML documents.
Databases such as  MongoDB, Elasticsearch, Amazon SimpleDB and DynamoDB
often store binary data as base64.
%RFC 4648 and RFC 2045.
In a similar manner, binary data (e.g., images, WebAssembly code) can also be included inside text-only resources like XML, JSON, CSS, SVG, JavaScript or HTML documents.  File checksums are often presented as base64 data.
Base64 is part of the standard library of many popular programming languages (Java, Go, C\#, JavaScript, Swift), it is used in many important database systems. Some database systems even store binary data as base64 (MongoDB, Elasticsearch, Amazon SimpleDB and DynamoDB).

Table~\ref{tab:base64ex} presents some example of base64 strings and their decoded value. One or two optional padding characters (\texttt{=}) can appear at the end. The ASCII white-space characters may appear and should be ignored: form feed (`\textbackslash{}f'), tab (`\textbackslash{}t'), line feed (`\textbackslash{}n'), and carriage return (`\textbackslash{}r'). In these examples, the decoded value is an ASCII string, but any bytes can be encoded as base64, included images or cryptographic keys.

\begin{table}\centering
\caption{Base64 decoding examples.\label{tab:base64ex}}%
\centering
\begin{tabular}{ll}
\toprule
base string & decoded data \\ 
\midrule
\texttt{ Y\textbackslash{}fW\textbackslash{}tJ\textbackslash{}njZ A=\textbackslash{}r= } & \texttt{abcd} \\
\texttt{SGVsbG8sIFdvcmxkIQ==} & \texttt{Hello, World!}\\
\texttt{MTIzNDU2} & \texttt{123456}\\
\bottomrule
\end{tabular}
\end{table}









In 2006, the base64 format was originally specified by Josefsson~\cite{rfc4648} in the RFC~4648. The specification states that
implementations must reject the encoded data if it contains characters outside the base alphabet such as white-space characters---unless explicitly stated otherwise. E.g., in the MIME format~\cite{rfc2045}, characters outside the alphabet are ignored.
RFC~4648 warns about security issues with non-validating decoders.
In 2016, the Web Hypertext Application Technology Working Group proposed the WHATWG Infra Standard~\cite{whatwginfra}: it seeks to 
align standards on conventions, terminology, and data structures with respect to Web technologies. It specifies a base64 standard which, like RFC~4648, validates the input by rejecting characters outside the base alphabet, but tolerates ASCII white-space characters. In turn, the WHATWG HTML specification~\cite{whatwghtml} defines the JavaScript \texttt{atob} function in the same manner, referencing the WHATWG Infra Standard.

Standard libraries provide different support of base64 decoding. See Table~\ref{tab:base64prog}. While Java adopts a strict approach, C\# and JavaScript follow the WHATWG forgiving base64 decoding approach, tolerating white spaces but validating the rest of the content.

\begin{table}\centering
\caption{Base64 decoding conventions by programming language. RFC~4648 decoder return an error on non-base64 characters. \label{tab:base64prog}}%
\centering
\begin{tabular}{llp{7cm}}
\toprule
 language & standard function & behavior \\ 
\midrule
JavaScript & \texttt{atob} & WHATWG forgiving \\
C\# & \texttt{FromBase64String}  & WHATWG forgiving \\
Go & \texttt{base64.Decode} & ignores line feed (`\textbackslash{}n'), and carriage return (`\textbackslash{}r') but otherwise rejects non-base64 characters\\
Python & \texttt{b64decode} (\texttt{validate=False})  & error on non-ASCII, ignores other non-base64 characters \\
Python & \texttt{b64decode} (\texttt{validate=True}) & RFC~4648 \\
PHP & \texttt{base64\_decode} (\texttt{\textdollar{}strict = false}) & ignores  non-base64 characters \\
PHP & \texttt{base64\_decode} (\texttt{\textdollar{}strict = true})& RFC~4648 \\
Java & \texttt{Base64.getDecoder().decode} &  RFC~4648\\
\bottomrule
\end{tabular}
\end{table}


Most commodity processors, including ARM and x64, support single-instruction-multiple-data (SIMD) instructions. These instructions operate on wide registers (e.g., 16~bytes, 32~bytes, 64~bytes or more). 
Using SIMD instructions often improves performance while reducing energy usage~\cite{Cebrian2019,guermouche2022thermal} by reducing the instruction cont.
Mu\l{}a and Lemire~\cite{simdbase64,mula2020base64} showed that SIMD instructions could multiply the speed of base64 encoding and decoding.
Such approaches were later adopted by the OpenJDK (Java) for both encoding and decoding. The Java standard base64 decoder throws an exception of the base64 input contains spaces or any other unexpected characters. 

The C\# standard library and the Node.js JavaScript environment use SIMD-accelerated functions for base64 encoding. However, neither provide SIMD-accelerated functions for decoding. We expect that they 
optimized the base64 encoding but left the base64 decoding unoptimized due
to the added complexity of validating the content while ignoring the spaces.

Thus we set out to solve this problem and offer efficient SIMD-based decoding algorithms in the presence of spaces. Maybe surprisingly, we 
find that our decoding algorithms have a performance that is comparable with
SIMD-base base64 decoding functions designed for inputs without spaces. Indeed, when no space is present in the input, our functions do not incur a penalty even though they have to check for spaces. Our algorithms check for spaces as part of the validation with little to no overhead.



\section{WHATWG Forgiving Base64}
\label{sec:base64}
ASCII strings can be viewed as sequences of integer values (i.e., characters) in the interval $[0,128)$. Most of these values have a corresponding printable characters (e.g., \texttt{A} or \texttt{?}) while others are control characters. They are often stored using one byte per character. Base64 strings are normally ASCII strings.

Base64 uses each character to store a 6-bit value. Table~\ref{tab:base64table} provides  a map between 6-bit values and ASCII characters. During decoding, we take sequences of four~base64 characters ($4 \times 6$~bits) and we decode them to three bytes ($3 \times 8$~bits). Thus, for example, 
the  base64 sequence \texttt{AAAA} because three zero bytes. The base64 sequence \texttt{////} becomes three bytes with all bits set (\texttt{0xFF}). During decoding, we may have to check for the presence of unexpected characters---as not all inputs are valid.

During the encoding, given a sequence of three bytes (integer values in $[0,256)$) $s_1, s_2, s_3$, we first construct a sequence of four 6-bit values:  $s_1 \div 4$, 
$(s_2 \div 16) + (s_1 \times 16) \bmod 64$, 
$(s_2 \times 4)\bmod 64 + (s_3 \div 64) $ and
$s_3 \bmod 64$. 
We then use able~\ref{tab:base64table} to map each 6-bit value to an ASCII character. When the input is not divisible by three, we may need to map one 8-bit value to two 6-bit values, or two 8-bit values to three 6-bit values:
\begin{itemize}
    \item $s_1 \to s_1 \div 4, (s_1 \times 16) \bmod 64$, 
    \item $s_1, s_2 \to s_1 \div 4, (s_2 \div 16) + (s_1 \times 16) \bmod 64, (s_2 \times 4)\bmod 64 $. 
\end{itemize}
To make sure that the input is made of a number of base64 characters divisible by four, encoder may add one or two padding characters ('\texttt{=}').
The encoding problem does not require validation of  the input (any binary input in valid) and thus we have high-speed functions~\cite{mula2018faster,mula2020base64} that are generally applicable.

The WHATWG forgiving base64 decoding specification requires us to produce an algorithm equivalent to the following. We begin with an input that contains a fixed number of ASCII characters. The specification does not require the input to be encoded using one byte per character: it may happen that the ASCII characters each occupy a 16-bit unit if they are stored as an UTF-16 Unicode string. However, if any value i
\begin{enumerate}
    \item Remove the ASCII white-space characters: form feed (`\textbackslash{}f'), tab (`\textbackslash{}t'), line feed (`\textbackslash{}n'), and carriage return (`\textbackslash{}r').
    \item If number of remaining characters is divisible by four, then remove up to two trailing padding characters (\texttt{=}).
    \item If the input size in characters divided by four has a remainder of 1: return a failure.
    \item If the input contains a character that is not part of the base64 alphabet (ASCII letter, digit or `\texttt{+}', `\texttt{/}'), return a failure.
    \item As long as there are at least four characters left, look them up in Table~\ref{tab:base64table} and convert them into four 6-bit values (integers in $[0,64)$): $d_1, d_2, d_3, d_4$.
    We then output the three byte values:
    $(d_1 \times 4) + (d_2 \div 16),
    (d_2 \times 16) + (d_3 \div 4),
    (d_3 \times 64) + d_4$.
    \item If there are three characters left, decode them from Table~\ref{tab:base64table} into three 6-bit values $d_1, d_2, d_3$
    and output two bytes: $(d_1 \times 4) + (d_2 \div 16),
    (d_2 \times 16) + (d_3 \div 4)$. If there are two characters left, decode them from Table~\ref{tab:base64table} into three 6-bit values $d_1, d_2$ and output value $(d_1 \times 4) + (d_2 \div 16)$. Observe that in both cases, a few bits from the input are discarded (deliberately).

\end{enumerate}

Though it appears that there are many steps, the bulk of the decoding is a tight loop where we load multiples of four characters, look them up and then turn them into multiples of three bytes. The steps were we check for padding character or the special handling of the two or three remaining characters are not performance sensitive.

\begin{table}\centering
\caption{Base64 mapping\label{tab:base64table} between 6-bit values and ASCII characters.}%
\centering
\begin{tabular}{cc|cc|cc|cc}
\toprule
value &  char & value  & char & value I & char & value & char \\ 
\midrule
\input base64table.tex
\bottomrule
\end{tabular}
\end{table}
\section{Algorithmic Design}

We seek to encode to base64 and decode from base64 using as few instructions as possible. To this end, we load our data into 512-bit (64~bytes) registers and we use instructions that operate on full 512-bit registers. Because encoding \emph{expands} the number of bytes, we need to consume 48~bytes if we want the encoder to produce 64~bytes with each iteration. Similarly, we want the decoder to consume 64~bytes and produce 48~bytes per iteration.

The AVX-512 instruction sets\cite{Reinders2013} were first introduced by Intel in 2013. It consists of several distinct instructions sets, not all of which are included on all processors with AVX-512 support. 
Within AVX-512, we use instructions from the \emph{Vector Byte Manipulation Instructions} (VBMI) set which we expect to be included in   all new Intel microarchitectures (e.g., Cannon Lake, Cascade Lake, Cooper Lake, Ice Lake) for laptops and servers. 
AVX-512 instructions have been used to accelerate the implementation of algorithms in genomics\cite{Rucci2019}, machine learning\cite{BNCSS117}, databases\cite{Lasch:2019:FSC:3329785.3329924,Zarubin:2019:ICN:3329785.3329923,kersten18} as well as in high-performance computing.



\subsection{Encoding}



%\url{http://www.0x80.pl/notesen/2016-04-03-avx512-base64.html#avx512vl}.
If we omit load and store instructions, only two \texttt{vpermb} and
one \texttt{vpmultishiftqb}, i.e.\ just three instructions, 
are necessary
to encode 48~bytes into base64.  In contrast, the previously best
vectorized base64 encoder\cite{simdbase64} based on AVX2 and 256-bit registers
uses 11~SIMD instructions to encode 24~bytes into base64.
In other words, we achieve a seven-fold reduction in instruction count for a given
number of bytes---it exceeds the reduction by a factor of two that we may expect from a doubling of the register size  from 256 to 512~bits.

We use only two distinct AVX-512 instructions:
\begin{itemize}
\item The \texttt{vpermb} instruction takes two 512-bit registers as inputs and treats them as arrays
of 64~bytes. One register is  an array of indexes ($x$), the other  is a collection
of values ($a$). 
The instruction computes the composition of the values and the indexes, $(a[x[0]], a[x[1]], \ldots, a[x[63]])$,
with the convention that only the six least significant digits of index values  are used, the two most significant bits are silently ignored.


The characteristics of this instruction are particularly useful because base64 has exactly 64~ASCII output characters.
\item The  \texttt{vpmultishiftqb} instructions takes two 512-bit registers as inputs. One register is made of eight 64-bit words,
whereas the other register is an array of 64~bytes that are interpreted as shifts. The instruction executes a
total of 64~shifts.

The instruction processes each 64-bit word, separately. Each such 64-bit word from the first register is paired with eight shift bytes from the second register.

Given a 64-bit word and a given shift byte, we take the least significant 6~bits of the
shift byte (as a number between 0 and 64), rotate right the  64-bit word by this amount,
and then output the least significant 8~bits.
\end{itemize}


We can separate the encoding task into two steps. Our goal is to map each sequence of three bytes
 $s_1, s_2, s_3$ to the four 6-bit values $s_1 \div 4$, 
$(s_2 \div 16) + (s_1 \times 16) \bmod 64$, 
$(s_2 \times 4)\bmod 64 + (s_3 \div 64) $ and
$s_3 \bmod 64$.




\begin{enumerate}
    \item We first want to map each block of three 8-bit values to a block of four 6-bit values. 
We plan to produce 64~ASCII characters so we consume only first 48~bytes of the register, ignoring the last 16~bytes of the 64-byte register.
      
    We use the \texttt{vpermb} instruction to map  each sequence of three bytes
    ($s1,s2,s3$) into a sequence of four bytes ($s2,s1,s3,s2$).
Thus if we start with bytes values 0 to 63 (grouped in sets of three)
\begin{center}
\begin{tabular}{ccc|ccc}
    0& 1& 2&   3& 4& 5\\ 
    6& 7& 8&   9& 10& 11\\
    12& 13& 14&   15& 16& 17\\ 
    18& 19& 20&   21& 22& 23\\ 
    24& 25& 26&   27& 28& 29\\ 
    30& 31& 32&   33& 34& 35\\ 
    36& 37& 38&   39& 40& 41\\ 
    42& 43& 44&   45& 46& 47\\ 
    48& 49& 50&   51& 52& 53\\ 
    54& 55& 56&   57& 58& 59\\ 
    60& 61& 62&   63, &  & \\
\end{tabular}\end{center}
we would finish, after the mapping, with byte values (grouped in sets of four)\begin{center}
\begin{tabular}{cccc|cccc}
    1& 0& 2& 1& 4& 3& 5& 4\\ 
7& 6& 8& 7& 10& 9& 11& 10\\
13& 12& 14& 13& 16& 15& 17& 16\\
19& 18& 20& 19& 22& 21& 23& 22\\ 
25& 24& 26& 25& 28& 27& 29& 28\\  
31& 30& 32& 31& 34& 33& 35& 34\\  
37& 36& 38& 37& 40& 39& 41& 40\\  
43& 42& 44& 43& 46& 45& 47& 46. \\
\end{tabular}\end{center}
As our example illustrates, the last sixteen values from the input are unused. Moreover, each block of three input bytes occupies 32~bits (4~bytes) in the shuffled register. To complete the encoding, we need to reorganize the bits in each 32-bit block to fit the base64 format.


To arrive at this desired bit layer, we apply the \texttt{vpmultishiftqb} instruction. Each 8-byte word is shifted eight times with the shift values\begin{center}
\begin{tabular}{llll}
10,& 4,& 22,& 16,\\  
10 + 32,& 4 + 32,& 22 + 32,& 16 + 32.\\
\end{tabular}\end{center}
It is best to view our application of the  \texttt{vpmultishiftqb} on an 4-byte basis even though it operates on 8-byte words.
To see what these shifts do, 
let us consider any four packed bytes $s2,s1,s3,s2$. We label the bit values from  $s1$ to a, $s2$ to b, and $s3$ to c. Similarly add another sequence of four bytes, this time with the labels d,e,f. We start with the following content 
\begin{verbatim}
[bbbbbbbB|aaaaaaaA|cccccccC|bbbbbbbB|eeeeeeeE|dddddddD|fffffffF|eeeeeeeE].
\end{verbatim}
We use the upper case letter to indicate the most significant bit of each byte value.
We then get the following after applying the various right shifts (10, 4, \ldots) and selecting only the least significant eight bits:
\begin{verbatim}
10   : aaaaaAcc,
4    : bbbBaaaa,
22   : cCbbbbbb,
16   : cccccccC,
10+32: dddddDff,
4+32 : eeeEdddd,
22+32: fFeeeeee,
16+32: fffffffF.
\end{verbatim}
We can then pack the result to determine the result of the  \texttt{vpmultishiftqb} instruction:
\begin{verbatim}
[aaaaaAcc|bbbBaaaa|cCbbbbbb|cccccccC|dddddDff|eeeEdddd|fFeeeeee|fffffffF].
\end{verbatim}    
Let us ignore the most significant two bits of each byte:
\begin{verbatim}
[aaaaaA--|bbbBaa--|cCbbbb--|cccccc--|dddddD--|eeeEdd--|fFeeee--|ffffff--].
\end{verbatim}    
If we ignore the two most significant bits of each byte, we see that starting from sequences of four byte values $s2,s1,s3,s2$, we output the four byte values $s_1 \div 4$, 
$(s_2 \div 16) + (s_1 \times 16) \bmod 64$, 
$(s_2 \times 4)\bmod 64 + (s_3 \div 64) $ and
$s_3 \bmod 64$. We do not have to explicitly reset these two bits because, in the upcoming second step, the \texttt{vpermb} instruction does it internally.

 The \texttt{vpmultishiftqb} allows us to use fewer instructions. In our AVX2 algorithm\cite{simdbase64}, this bit shifting requires as much as five instructions: two bitwise AND instructions, two variable shifts instructions and one bitwise OR instruction.
 
    \item We then need to map the blocks of 6-bit values using the \texttt{vpermb} instruction. The 6-bit values are used as indexes while the values are  the list of possible ASCII values as a 64-byte register:\\ \texttt{ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/}.\\
    We can merely replace a few characters in this register to support other base64 variants\cite{rfc4648} like base64url: in fact any 64-byte mapping is feasible, even if determined dynamically at runtime.
\end{enumerate}



We summarize the encoding process in Fig.~\ref{fig:encoding}.
In practice, the input to be encoded may not be divisible by 48~bytes: we process any leftover bytes using a conventional code path.

\subsection{Decoding}

One might expect decoding to be just like encoding but in reverse. However, we must validate that the input is proper base64 text. Though the encoding requires only three instructions per block of 64~bytes, we need five instructions to decode 64~bytes: \texttt{vpermi2b}, \texttt{vpternlogd},
\texttt{vpmaddubsw}, \texttt{vpmaddwd}, and \texttt{vpermb}. A single call to an additional instruction (\texttt{vpmovb2m}) is needed, once per base64 stream.
%If we omit load and store instructions, only three instructions are necessary
%to encode 48~bytes to 64~base64 bytes (two \texttt{vpermb} and one \texttt{vpmultishiftqb}). 
In contrast, the best 256-bit vectorized decoder\cite{simdbase64} uses
14~SIMD instructions to decode 32 input ASCII bytes into 24 output bytes. 
Thus we almost achieve a five-fold reduction in the instruction count for the same number of input bytes. Again, it is far better than the reduction by a factor of two that the wider registers would suggest.
%In other words, we achieve a seven-fold reduction in instruction count for a given
%number of bytes---it exceeds the reduction by a factor of two that we may expect from a doubling of the register size (256-bit to 512-bit registers).



In addition to the \texttt{vpermb} instruction, already present in the encoder, we use the following five AVX-512 instructions:
\begin{itemize}
\item The \texttt{vpermi2b} instruction is a more powerful version of the \texttt{vpermb} instruction. It takes three 512-bit registers.
   One of them ($x$) acts as an array of 64~byte-valued indexes, only the least significant 7~bits of each byte is considered, the most significant bit is ignored. Thus the register is treated as an array of integer indexes in the interval $[0, 128)$.
 The most significant bit in each index value of $x$ is just ignored. 
  The other two registers ($a$, $b$) form a 128-byte array used for lookup. When the index value is less than 64, one register is used, otherwise the other is used.
  Let $\mathrm{choose}(i,x, a, b)$ output 
$ a[x[i]]$ when $x[i]<64$ and $b[x[i]-64]$, with the convention that $x[i]$ is a 6-bit value in $[0,128)$.
We can formally represent the result of the \texttt{vpermi2b} instruction as
$(\mathrm{choose}(0,x, a, b), \mathrm{choose}(1,x, a, b), \ldots, \mathrm{choose}(64,x, a, b))$. 
\item The \texttt{vpmovb2m} instruction creates a 64-bit mask value made of all of the most significant bits of all 64 input bytes taken from a single 512-bit register. 
Thus to check that all byte values in a registers are 7-bit values---i.e.\ are smaller than 0x80---it suffices to check whether the result of the \texttt{vpmovb2m} instruction is zero.

\item The \texttt{vpternlogd}  computes any ternary Boolean function (e.g., A OR B OR C). The function is selected by a programmer by passing an immediate 8-bit integer value to the instruction. This instruction can replace several logical instructions, thus decreasing the instruction count.

\item The multiply-add \texttt{vpmaddubsw} instruction works over pairs of registers which are considered as arrays of thirty-two 16-bit block. 
Each 16-bit block is treated as a vector of two 8-bit integer values. Values from one register are treated as signed bytes $[-128, +127)$ and values from the other register as unsigned bytes $[0, 256)$.

We compute the scalar product of aligned pairs of 16-bit blocks: if the 8-bit integers $x_1$ and $x_2$ come from the first register, and the 8-bit integers $y_1$ and $y_2$ come from the second register, we output $x_1 \times y_1 + x_2 \times y_2$ as a 16-bit value.

\item The \texttt{vpmaddwd} instruction works similarly to the \texttt{vpmaddubsw} instructions but uses 32-bit blocks and multiplying 16-bit signed integers instead.
\end{itemize}

We loop over 512-bit inputs, i.e. 64~ASCII characters.
We first translate the ASCII characters into 6-bit values stored in separate bytes. At this stage, we must detect errors; that is,
we must detect invalid ASCII characters outside of the base64 table.
To translate the ASCII characters to 6-bit values while detecting bad characters, the
 \texttt{vpermi2b} instruction is ideally suited. 
 We set all byte values in the two lookup arrays to byte values 0x80 except for values
 at indexes corresponding to base64 ASCII code points: 0x41, 0x42, \ldots which are set to their
 corresponding 6-bit value, as per Table~\ref{tab:base64table}. 
 If all input values are allowable base64 ASCII characters, we get the correct
 6-bit values stored in a corresponding byte. 
 If any unallowed ASCII character is encountered, then it will result
 in the 0x80 byte value. 
 Furthermore, any non-ASCII code point is characterized as an  input byte
 with the most significant bit set.
 Thus if we take the resulting register  from the \texttt{vpermi2b} instruction and that we
 compute the bitwise OR with the original input, the input contains an incorrect character
 if an only if we can detect a byte value with its most significant bit set.
 %We can make this check with the \texttt{vpmovb2m} instruction. Each check will result in a branch. 
 %At this stage we have got information about wrong input.
 If we want to report errors immediately, we can make this check with the \texttt{vpmovb2m} instruction followed by a conditional branch instruction. However, we may postpone error reporting to the end, avoiding branching in the hot loop.
% We can avoid the repeated branches and save some instructions in the process. 
We initialize a 512-bit  \textsc{error} register with zeros, and then repeatedly 
 replace its value with its bitwise OR with the bitwise OR of the input register and of
 the result  \texttt{vpermi2b} instruction. The two bitwise OR operations can 
 be expressed with a single instruction \texttt{vpternlogd}.
 That is, the \texttt{vpmovb2m} instruction followed by a branch is replaced by a single instruction (\texttt{vpternlogd}).
 At the end of the processing, we can check the most significant bit values of the bytes of the
 \textsc{error} register are zero. 
See Fig.~\ref{fig:decoding1}.







The final stage of decoding consists in packing all 6-bit fields into a continuous array of 48 bytes. We proceed in two steps.

\begin{itemize}
    \item  We first need to pack four 6-bit values int into 24-bit words.
    Thus we need to modify, in parallel, the sixteen 32-bit words contained in our working register.
    We achieve this result by two
    multiply-add instructions, operating over 32-bit words.
    We can represent our initial stage within each 32-bit words as follows:
\begin{verbatim}
[00dddddd|00cccccc|00bbbbbb|00aaaaaa].
\end{verbatim}    
If we represent the four byte values as $D, C, B, A$, we want to first replace the sequence of two 8-bit values $D,C$, by the 16-bit value $D + C \times 2^6$; and similarly for the sequence $B,A$. We can get this result with the \texttt{vpmaddubsw} by combining our working register with a constant register made of the values $(0,2^6, 0, 2^6, \ldots)$. The  result on a 32-bit word basis is 
\begin{verbatim}
[0000cccc|ccdddddd|0000aaaa|aabbbbbb].
\end{verbatim}
Finally, we need to combine successive 16-bit words, which we can do in a similar manner, this time using the  \texttt{vpmaddwd} instruction and multiplying our working register with the constant $(2^{12}, 1, 2^{12}, 1, \ldots)$. We get
\begin{verbatim}
[00000000|aaaaaabb|bbbbcccc|ccdddddd].
\end{verbatim}

\item  One byte out of each 4~bytes is zero. We need to \emph{pack} the result into 48~consecutive bytes, in the order specified by the base64 standard. We can achieve this result with the \texttt{vpermb} instruction, using the 48~indexes
\begin{verbatim}
6,0,1,2,9,10,4,5,12,13,14,8,22,16,17,18,25,26,20,21,28,29,30,24,38,32,33,
34,41,42,36,37,44,45,46,40,54, 48,49,50,57,58,52,53,60,61,62,56.
\end{verbatim}
 There are 16~trailing bytes that are unused, so the last 16~indexes are irrelevant.

\end{itemize}

Thus the second stage consists in only three instructions:  \texttt{vpmaddubsw}, \texttt{vpmaddwd}, and \texttt{vpermb}.
See Fig.~\ref{fig:decoding2}.



As with the encoding algorithm, we need handle the case where the input is not a multiple of 64~bytes with a final and separate code path.



\section{Experiments}
include bun's atob.

do:

bun build —sourcemap=inline —target=bun @babel/core

Or pretty much any big JS file. Might need to import/requure like 10 copies of the same file with different paths to see the difference with larger input 

I don’t remember if it uses the base64 or base64url code path. If former then it would need to wait until we switch to simdutf there too

add power usage: \url{https://github.com/lemire/Code-used-on-Daniel-Lemire-s-blog/blob/master/2024/02/19/src/demo.c}
https://www.rfc-editor.org/rfc/rfc4648

- try input that have no spaces

- AVX-512 looks good. But maybe add graviton to the lot?
- Look at power usage
- Bench node 22.

We summarize the characteristics of our hardware platform in
 Table~\ref{tab:test-cpus}. This processor has 32\,kB of fast (L1) cache per core, 256\,kB of secondary (L2) cache per core and 4\,MB of last-level cache (L3). The system has 
 has a maximal copy (\texttt{memcpy}) bandwidth of $\approx$20\,GB/s.
On some Intel processors, AVX-512 instructions\cite{inteloptimization} are subject to downclocking: whenever AVX-512 instructions are executed, the processor lowers its frequency. We do not observe any downclocking on our processor, nor did we find any Intel documentation referencing downclocking for this processor. To test for downclocking, we used the \texttt{avx-turbo}~\cite{avxturbo} benchmarking tool: it reports the processor frequency after issuing long sequences of expensive instructions of various types, including AVX-512 multiplication and floating-point instructions.

We implemented our software in C. To ease reproducibility, we make it freely available.\footnote{\url{https://github.com/WojciechMula/base64-avx512}}
We compile our code using the GNU~GCC~9.1 compiler with the \texttt{-O3 -march=cannonlake} flags. As a state-of-the-art conventional base64 codec, we use the library used by the Chrome browser. For comparison, we use an optimized AVX2 codec\cite{simdbase64} from our previous work.
To measure the speed, we take 10~measures, compute the median time. Our timings include some fixed overhead costs such as the  function call.

\begin{table*}
\caption{\label{tab:test-cpus} Hardware 
}
\centering
\begin{minipage}{\textwidth}
\centering
\begin{tabular}{cccccc}\toprule
Processor   & Base Frequency & Max. Frequency  & L1 data cache per core & Microarchitecture                          & Compiler\\ \midrule
Intel i3-8121U & 2.2\,GHz  & 3.2\,GHz & 32\,kB & Cannon~Lake (2018) & GCC  9.1 \\
\bottomrule
\end{tabular}
\end{minipage}
\end{table*}



In Fig.~\ref{fig:results}, we present the encoding and decoding speed using random binary data as data source, varying the size from 1\,kB to 64\,kB. Our processor has 32\,kB of L1 cache per core, so we expect that it is able to do a memory copy (\texttt{memcpy}) entirely in L1 cache as long as the input fits in 16\,kB.
We see that for inputs of about 10\,kB, we reach a top copy speed of over 150\,GB/s. This speed is slightly penalized by overhead (function calls and time measurements). 
The speed of the new AVX-512 coded is more than twice that of the state-of-the-art AVX2\cite{simdbase64} codec. This is especially apparent when the data fits in L1 cache (e.g., when the input in less or equal to 12\,kB). 
The speed of the AVX-512 codec is limited to 40\,GB/s for inputs larger than 16\,kB---the same speed also limits the memory copy.
For larger input, the speed of the AVX2 codec is  17\,GB/s for encoding about 15.5\,GB/s for decoding. The conventional codec (Chrome) encodes at 1.5\,GB/s and decodes at 2.6\,GB/s.





We do not expect the vectorized codecs (AVX2 and AVX-512) to be sensitive to the content of the input, keeping the size constant. Nevertheless we run benchmarks on standard images from image processing (Lena, mandril), a Google logo found to be base64 encoded in the Google search page and a large zip file. Our test data is available along with our software. See Table~\ref{tab:perf} for decoding performance.  As expected, the results are similar as with random data. The decoder used in the Chrome browser has a constant speed of 2.6\,GB/s, irrespective of the input size. For the Google logo which fits in L1 cache, the memory copy is faster, but otherwise our AVX-512 is even slightly faster than a memory copy. This is possible because we use the base64 size as a reference when computing the speed: to decode 1\,GB of base64 data, we only need to write about 786\,MB whereas a memory copy must still write a full 1\,GB.  For the large zip file, the AVX-512 is as fast as a memory copy: the benefit of the vectorized decoders (AVX2 and AVX-512)  is less important in this case because we are limited by memory access. In practice, it might be preferable to process large files in small parts that fit in cache when possible to avoid having to write to RAM\@.







\section{Conclusion}
\bibliography{references}


\end{document}
